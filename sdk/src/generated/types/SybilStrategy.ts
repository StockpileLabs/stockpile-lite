/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js'
import * as beet from '@metaplex-foundation/beet'
import * as beetSolana from '@metaplex-foundation/beet-solana'
import { CustomStrategy, customStrategyBeet } from './CustomStrategy'
/**
 * This type is used to derive the {@link SybilStrategy} type as well as the de/serializer.
 * However don't refer to it in your code but use the {@link SybilStrategy} type instead.
 *
 * @category userTypes
 * @category enums
 * @category generated
 * @private
 */
export type SybilStrategyRecord = {
  None: void /* scalar variant */
  Relayer: { fields: [web3.PublicKey[]] }
  Custom: { fields: [CustomStrategy] }
}

/**
 * Union type respresenting the SybilStrategy data enum defined in Rust.
 *
 * NOTE: that it includes a `__kind` property which allows to narrow types in
 * switch/if statements.
 * Additionally `isSybilStrategy*` type guards are exposed below to narrow to a specific variant.
 *
 * @category userTypes
 * @category enums
 * @category generated
 */
export type SybilStrategy = beet.DataEnumKeyAsKind<SybilStrategyRecord>

export const isSybilStrategyNone = (
  x: SybilStrategy
): x is SybilStrategy & { __kind: 'None' } => x.__kind === 'None'
export const isSybilStrategyRelayer = (
  x: SybilStrategy
): x is SybilStrategy & { __kind: 'Relayer' } => x.__kind === 'Relayer'
export const isSybilStrategyCustom = (
  x: SybilStrategy
): x is SybilStrategy & { __kind: 'Custom' } => x.__kind === 'Custom'

/**
 * @category userTypes
 * @category generated
 */
export const sybilStrategyBeet = beet.dataEnum<SybilStrategyRecord>([
  ['None', beet.unit],
  [
    'Relayer',
    new beet.FixableBeetArgsStruct<SybilStrategyRecord['Relayer']>(
      [['fields', beet.tuple([beet.array(beetSolana.publicKey)])]],
      'SybilStrategyRecord["Relayer"]'
    ),
  ],
  [
    'Custom',
    new beet.FixableBeetArgsStruct<SybilStrategyRecord['Custom']>(
      [['fields', beet.tuple([customStrategyBeet])]],
      'SybilStrategyRecord["Custom"]'
    ),
  ],
]) as beet.FixableBeet<SybilStrategy, SybilStrategy>
