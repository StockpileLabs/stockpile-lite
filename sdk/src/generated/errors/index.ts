/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

type ErrorWithCode = Error & { code: number }
type MaybeErrorWithCode = ErrorWithCode | null | undefined

const createErrorFromCodeLookup: Map<number, () => ErrorWithCode> = new Map()
const createErrorFromNameLookup: Map<string, () => ErrorWithCode> = new Map()

/**
 * DefaultError: 'I'm too lazy to write errors'
 *
 * @category Errors
 * @category generated
 */
export class DefaultErrorError extends Error {
  readonly code: number = 0x0
  readonly name: string = 'DefaultError'
  constructor() {
    super("I'm too lazy to write errors")
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, DefaultErrorError)
    }
  }
}

createErrorFromCodeLookup.set(0x0, () => new DefaultErrorError())
createErrorFromNameLookup.set('DefaultError', () => new DefaultErrorError())

/**
 * PendingStart: 'Pool is pending start'
 *
 * @category Errors
 * @category generated
 */
export class PendingStartError extends Error {
  readonly code: number = 0x1
  readonly name: string = 'PendingStart'
  constructor() {
    super('Pool is pending start')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, PendingStartError)
    }
  }
}

createErrorFromCodeLookup.set(0x1, () => new PendingStartError())
createErrorFromNameLookup.set('PendingStart', () => new PendingStartError())

/**
 * PoolDistributed: 'Pool funds have been distributed'
 *
 * @category Errors
 * @category generated
 */
export class PoolDistributedError extends Error {
  readonly code: number = 0x2
  readonly name: string = 'PoolDistributed'
  constructor() {
    super('Pool funds have been distributed')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, PoolDistributedError)
    }
  }
}

createErrorFromCodeLookup.set(0x2, () => new PoolDistributedError())
createErrorFromNameLookup.set(
  'PoolDistributed',
  () => new PoolDistributedError()
)

/**
 * VaultClosed: 'This vault is closed'
 *
 * @category Errors
 * @category generated
 */
export class VaultClosedError extends Error {
  readonly code: number = 0x3
  readonly name: string = 'VaultClosed'
  constructor() {
    super('This vault is closed')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, VaultClosedError)
    }
  }
}

createErrorFromCodeLookup.set(0x3, () => new VaultClosedError())
createErrorFromNameLookup.set('VaultClosed', () => new VaultClosedError())

/**
 * VaultDeactivated: 'This vault is deactivated'
 *
 * @category Errors
 * @category generated
 */
export class VaultDeactivatedError extends Error {
  readonly code: number = 0x4
  readonly name: string = 'VaultDeactivated'
  constructor() {
    super('This vault is deactivated')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, VaultDeactivatedError)
    }
  }
}

createErrorFromCodeLookup.set(0x4, () => new VaultDeactivatedError())
createErrorFromNameLookup.set(
  'VaultDeactivated',
  () => new VaultDeactivatedError()
)

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
export function errorFromCode(code: number): MaybeErrorWithCode {
  const createError = createErrorFromCodeLookup.get(code)
  return createError != null ? createError() : null
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
export function errorFromName(name: string): MaybeErrorWithCode {
  const createError = createErrorFromNameLookup.get(name)
  return createError != null ? createError() : null
}
