/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import { CreateVaultArgs, createVaultArgsBeet } from '../types/CreateVaultArgs'

/**
 * @category Instructions
 * @category CreateVault
 * @category generated
 */
export type CreateVaultInstructionArgs = {
  createVaultArgs: CreateVaultArgs
}
/**
 * @category Instructions
 * @category CreateVault
 * @category generated
 */
export const CreateVaultStruct = new beet.BeetArgsStruct<
  CreateVaultInstructionArgs & {
    instructionDiscriminator: number
  }
>(
  [
    ['instructionDiscriminator', beet.u8],
    ['createVaultArgs', createVaultArgsBeet],
  ],
  'CreateVaultInstructionArgs'
)

export const createVaultInstructionDiscriminator = 1

/**
 * Creates a _CreateVault_ instruction.
 *
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category CreateVault
 * @category generated
 */
export function createCreateVaultInstruction(
  args: CreateVaultInstructionArgs,
  programId = new web3.PublicKey('BNsqbpyoGuh66NJh5tRw6DNqy6y6X9s6LgF6yunDGRKt')
) {
  const [data] = CreateVaultStruct.serialize({
    instructionDiscriminator: createVaultInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = []

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
