/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import {
  ContributeWithVoteArgs,
  contributeWithVoteArgsBeet,
} from '../types/ContributeWithVoteArgs'

/**
 * @category Instructions
 * @category ContributeWithVote
 * @category generated
 */
export type ContributeWithVoteInstructionArgs = {
  contributeWithVoteArgs: ContributeWithVoteArgs
}
/**
 * @category Instructions
 * @category ContributeWithVote
 * @category generated
 */
export const ContributeWithVoteStruct = new beet.FixableBeetArgsStruct<
  ContributeWithVoteInstructionArgs & {
    instructionDiscriminator: number
  }
>(
  [
    ['instructionDiscriminator', beet.u8],
    ['contributeWithVoteArgs', contributeWithVoteArgsBeet],
  ],
  'ContributeWithVoteInstructionArgs'
)

export const contributeWithVoteInstructionDiscriminator = 4

/**
 * Creates a _ContributeWithVote_ instruction.
 *
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category ContributeWithVote
 * @category generated
 */
export function createContributeWithVoteInstruction(
  args: ContributeWithVoteInstructionArgs,
  programId = new web3.PublicKey('BNsqbpyoGuh66NJh5tRw6DNqy6y6X9s6LgF6yunDGRKt')
) {
  const [data] = ContributeWithVoteStruct.serialize({
    instructionDiscriminator: contributeWithVoteInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = []

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
